#! /usr/bin/env python3

from glob import glob
import json
import os
import pkginfo
import sys
import subprocess

from devpi_common.metadata import get_pyversion_filetype
import requests

from common import get_auth
from common import get_index_url
from common import get_payload


def message(text):
    print(text, file=sys.stderr)


def get_filepath(src, filename, pattern):
    filepath = None
    if not filename:
        message("Using glob-pattern: {}".format(pattern))
        package_files = sorted(glob(os.path.join(src, pattern)))
        if package_files:
            filepath = package_files[-1]
    else:
        filepath = os.path.join(src, filename)
    if not filepath or not os.path.exists(filepath):
        message("Couldn't find package!")
    else:
        message("Found package:      {}".format(filepath))
    return filepath


def put0(src):
    payload = get_payload()
    message("PAYLOAD:          {}".format(payload))
    url = get_index_url(payload)
    auth = get_auth(payload)

    message("Using dir:          {}".format(src))
    message("Using index-url:    {}".format(url))

    headers = {'X-Devpi-Auth': auth}
    filename = payload['params'].get('file')
    pattern = payload['params'].get('fileglob')
    if not (filename or pattern):
        message("Need at least 'file' or 'pattern' parameter.")

    message("src:                {}".format(src))
    message("filename:           {}".format(filename))
    message("pattern:            {}".format(pattern))
    message("srcfiles:           {}".format(os.listdir(src)))

    filepath = get_filepath(src, filename, pattern)
    message("fpath:           {}".format(os.listdir(filepath)))

    filename = os.path.basename(filepath)
    if not filepath:
        sys.exit(1)
    message("dirname:           {}".format(os.listdir(os.path.dirname(filepath))))

    meta = get_metadata(filepath)
    message("META:                {}".format(meta))

    meta[':action'] = 'submit'
    message("Register {}-{} to {}".format(meta['name'], meta['version'], url))
    response = requests.post(url, meta, headers=headers)
    response.raise_for_status()

    meta['pyversion'], meta['filetype'] = get_pyversion_filetype(os.path.basename(filename))
    meta[':action'] = 'file_upload'
    files = {'content': (filename, open(filepath, 'rb'))}
    response = requests.post(url, meta, headers=headers, files=files)
    message("Upload {} to {}".format(filename, url))
    response.raise_for_status()

    print(json.dumps({
        'version': {'version': meta['version']},
        'metadata': [
            {'name': 'index', 'value': payload['source']['index']},
            {'name': 'name', 'value': meta['name']},
            {'name': 'author', 'value': meta['author']},
            {'name': 'file', 'value': filename},
        ]
    }))


def put(src):
    payload = get_payload()
    message("PAYLOAD:          {}".format(payload))
    url = get_index_url(payload)
    auth = 'xx'

    message("Using dir:          {}".format(src))
    message("Using index-url:    {}".format(url))

    filename = payload['params'].get('file')

    message("src:                {}".format(src))
    message("filename:           {}".format(filename))
    message("srcfiles:           {}".format(os.listdir(src)))

    ret = subprocess.run(
        [
            "devpi",
            "use",
            "http://{username}:{password}@devpi:3141/{index}".format(
                **payload['source']),
        ], stdout=subprocess.PIPE
    )
    message("use returned:   {}".format(ret))

    ret = subprocess.run(
        [
            "devpi",
            "login",
            payload['source']['username'],
            "--password=%s" % payload['source']["password"]
        ], stdout=subprocess.PIPE
    )
    message("login returned:   {}".format(ret))

    proc = subprocess.Popen('cd %s; devpi upload' % (filename,),
                            stdout=subprocess.PIPE, shell=True)
    proc_stdout = proc.communicate()[0].strip()
    proc_stderr = proc.communicate()[1].strip()
    message("upload stdout:   {}".format(proc_stdout))
    message("upload stderr:   {}".format(proc_stderr))

    print(json.dumps({
        'version': {'version': 'v0.1dummy'},
        'metadata': [
            {'name': 'index', 'value': 'team/dev'},
            {'name': 'name', 'value': 'msgflow'},
            {'name': 'author', 'value': 'russ'},
            {'name': 'file', 'value': 'file'},
        ],
    }))


def get_metadata(path):
    message("path:           {}".format(path))
    info = pkginfo.get_metadata(path)
    message("info:           {}".format(info))
    meta = {attr: getattr(info, attr) for attr in info}
    message("meta:           {}".format(meta))
    return meta


if __name__ == '__main__':
    message("sys.argv[1]:        {}".format(sys.argv[1]))
    put(sys.argv[1])
    message("DONE")
